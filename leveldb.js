// Generated by CoffeeScript 1.9.0
(function() {
  var AbstractNoSQL, ChainedBatch, Errors, InvalidArgumentError, Iterator, LevelDB, binding, inherits;

  inherits = require('inherits-ex');

  AbstractNoSQL = require('abstract-nosql');

  Errors = require('abstract-nosql/abstract-error');

  binding = require('bindings')('leveldown.node').leveldown;

  ChainedBatch = require('./chained-batch');

  Iterator = require('./iterator');

  InvalidArgumentError = Errors.InvalidArgumentError;

  LevelDB = (function() {
    inherits(LevelDB, AbstractNoSQL);

    function LevelDB(location) {
      if (!(this instanceof LevelDB)) {
        return new LevelDB(location);
      }
      LevelDB.__super__.constructor.call(this, location);
      this.binding = binding(location);
      return;
    }

    LevelDB.prototype._openSync = function(options) {
      return this.binding.openSync(options);
    };

    LevelDB.prototype._closeSync = function() {
      return this.binding.closeSync();
    };

    LevelDB.prototype._isExistsSync = function(key, options) {
      var fillCache, result;
      fillCache = true;
      if (typeof options === 'object') {
        if (options.fillCache === false) {
          fillCache = false;
        }
      }
      result = this.binding.isExistsSync(key, fillCache);
      return result;
    };

    LevelDB.prototype._mGetSync = function(keys, options) {
      var asBuffer, fillCache, i, needKeyName, raiseError, result;
      fillCache = true;
      asBuffer = false;
      needKeyName = true;
      raiseError = true;
      if (typeof options === 'object') {
        if (options.fillCache === false) {
          fillCache = false;
        }
        if (options.asBuffer === true) {
          asBuffer = true;
        }
        if (options.keys === false) {
          needKeyName = false;
        }
        if (options.raiseError === false) {
          raiseError = false;
        }
      }
      result = this.binding.mGetSync(keys, fillCache, needKeyName, raiseError);
      if (asBuffer) {
        i = 1;
        while (i < result.length) {
          result[i] = new Buffer(result[i]);
          i += 2;
        }
      }
      return result;
    };

    LevelDB.prototype._getBufferSync = function(key, destBuffer, options) {
      var fillCache, offset, result;
      fillCache = true;
      offset = 0;
      if (typeof options === 'object') {
        if (options.fillCache === false) {
          fillCache = false;
        }
        if (options.offset > 0) {
          offset = options.offset;
        }
      }
      result = this.binding.getBufferSync(key, destBuffer, fillCache, offset);
      return result;
    };

    LevelDB.prototype._getSync = function(key, options) {
      var asBuffer, fillCache, result;
      fillCache = true;
      asBuffer = false;
      if (typeof options === 'object') {
        if (options.fillCache === false) {
          fillCache = false;
        }
        if (options.asBuffer === true) {
          asBuffer = true;
        }
      }
      result = this.binding.getSync(key, fillCache);
      if (asBuffer) {
        result = new Buffer(result);
      }
      return result;
    };

    LevelDB.prototype._putSync = function(key, value, options) {
      var flushSync;
      flushSync = false;
      if (typeof options === 'object' && options.sync === true) {
        flushSync = true;
      }
      return this.binding.putSync(key, value, flushSync);
    };

    LevelDB.prototype._delSync = function(key, options) {
      var flushSync;
      flushSync = false;
      if (typeof options === 'object' && options.sync === true) {
        flushSync = true;
      }
      return this.binding.delSync(key, flushSync);
    };

    LevelDB.prototype._batchSync = function(operations, options) {
      var flushSync;
      flushSync = false;
      if (typeof options === 'object' && options.sync === true) {
        flushSync = true;
      }
      return this.binding.batchSync(operations, flushSync);
    };

    LevelDB.prototype._approximateSizeSync = function(start, end) {
      return this.binding.approximateSizeSync(start, end);
    };

    LevelDB.prototype._chainedBatch = function() {
      return new ChainedBatch(this);
    };

    LevelDB.prototype.getProperty = function(property) {
      if (typeof property !== 'string') {
        throw new InvalidArgumentError('getProperty() requires a valid `property` argument');
      }
      return this.binding.getProperty(property);
    };

    LevelDB.prototype.IteratorClass = Iterator;

    LevelDB.destroySync = function(location) {
      return binding.destroySync(location);
    };

    LevelDB.repairSync = function(location) {
      return binding.repairSync(location);
    };

    LevelDB.destroy = function(location, callback) {
      if (typeof location !== 'string') {
        throw new InvalidArgumentError('destroy() requires a location string argument');
      }
      if (typeof callback !== 'function') {
        return LevelDB.destroySync(location);
      } else {
        return binding.destroy(location, callback);
      }
    };

    LevelDB.repair = function(location, callback) {
      if (typeof location !== 'string') {
        throw new InvalidArgumentError('repair() requires a location string argument');
      }
      if (typeof callback !== 'function') {
        return LevelDB.repairSync(location);
      } else {
        return binding.repair(location, callback);
      }
    };

    return LevelDB;

  })();

  module.exports = LevelDB;

}).call(this);
